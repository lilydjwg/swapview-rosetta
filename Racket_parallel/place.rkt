#lang racket/base
(require (only-in racket/file file->lines)
         (only-in racket/list empty split-at)
         (only-in racket/math exact-floor)
         (only-in racket/string string-split string-prefix?))
(provide pid-list former getSmaps getSize parallel exact-floor)
(define pid-list (filter string->number (map path->string (directory-list "/proc"))))
(define len (length pid-list))
(define-values (former latter) (split-at pid-list (exact-floor (/ len 2))))
(define (getSmaps pid-list) (map (lambda (pid) (with-handlers ([exn:fail:filesystem? (lambda (exn) empty)])
                                                 (file->lines (format "/proc/~a/smaps" pid))))
                                 pid-list))
(define (getSize smaps-list) (map (lambda (smaps)
                                    (* 1024 (apply + (map (lambda (s) (cond [(string-prefix? s "Swap:") (string->number (cadr (string-split s)))]
                                                                            [else 0])) smaps))))
                                  smaps-list))
(define (parallel pl)
  (display (getSize (getSmaps latter)) (current-output-port)))
